{"version":3,"sources":["Feeder.js","Paginator.js","entities/Starships.js","EntityNavigation.js","App.js","serviceWorker.js","index.js"],"names":["Feeder","props","Fragment","React","Component","Paginator","this","current","isAbleToNext","to","path","isAbleToPrevious","GET_DOGS","gql","Starships","page","useParams","query","variables","first","skip","fetchPolicy","loading","error","data","fetchMore","message","striped","allStarships","map","ship","i","key","id","name","Intl","DateTimeFormat","year","month","day","format","Date","createdAt","costInCredits","cargoCapacity","consumables","crew","hyperdriveRating","manufacturer","parseInt","EntityNavigation","activeClassName","color","client","ApolloClient","uri","App","className","size","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef8dcd1b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Button, Pagination, Card } from 'react-bulma-components';\n\nclass Feeder extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    \n    render(){\n        return(\n            <React.Fragment>\n            </React.Fragment>\n        )\n    }\n    \n}\n\nexport default Feeder;","import React from 'react'\n\n\nimport {\n    BrowserRouter as Router,\n    Link\n} from \"react-router-dom\";\n\nclass Paginator extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n                <h1>{this.props.current}</h1>\n                {this.props.isAbleToNext &&\n                    <Link to={this.props.path + (this.props.current+1)}>Next</Link>\n                }\n                {this.props.isAbleToPrevious &&\n                    <Link to={this.props.path + (this.props.current-1)}>Previous</Link>\n                }\n                \n                \n            </React.Fragment>\n        )\n    }\n}\n\nexport default Paginator;","import React from \"react\";\n\nimport { gql } from \"apollo-boost\";\nimport { Query } from \"react-apollo\";\nimport { useParams } from \"react-router\";\n\nimport Feeder from \"../Feeder\";\nimport Paginator from '../Paginator.js'\n\nimport './customcards.css'\n\nimport { Button, Pagination, Card, CheckboxControlled, Container, Table} from 'react-bulma-components';\n\nconst GET_DOGS = gql`\n  query AllStarships($first: Int, $skip: Int) {\n    allStarships(first: $first, skip: $skip) {\n      id\n      name\n      consumables\n      costInCredits\n      manufacturer\n      cargoCapacity\n      createdAt\n      crew\n      hyperdriveRating\n    }\n  }\n`;\n\nconst perPage = 10;\n\nconst Starships = () => {\n  let { page } = useParams();\n\n  if(page===null){\n    page = 1;\n  }\n\n\n  return (\n\n    <Query\n      query={GET_DOGS}\n      variables={{\n        first: perPage,\n        skip: perPage * (page - 1)\n      }}\n      fetchPolicy=\"cache-and-network\"\n    >\n      {({ loading, error, data, fetchMore }) => {\n        if (loading) return <Button loading={true}>Please Wait</Button> ;\n        if (error) return `Error! ${error.message}`;\n        return (\n          <Container>\n            <Table striped={false}>\n              <thead>\n                <tr>\n                  <th>No</th>\n                  <th>Name</th>\n                  <th>Created At</th>\n                  <th>Cost in Credits</th>\n                  <th>Cargo Capacity</th>\n                  <th>Consumables</th>\n                  <th>Crew</th>\n                  <th>Hyperdrive Rating</th>\n                  <th  >Manufacturer</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.allStarships.map((ship,i) => (\n                  <tr key={ship.id}>\n                    <th>{i+1 + perPage * (page - 1)}</th>\n                    <th>{ship.name}</th>\n                    <th>{new Intl.DateTimeFormat(\"en-US\", {\n                          year: \"numeric\",\n                          month: \"long\",\n                          day: \"2-digit\"\n                        }).format(new Date(ship.createdAt))}</th>\n                    <th>{ship.costInCredits}</th>\n                    <th>{ship.cargoCapacity}</th>\n                    <th>{ship.consumables}</th>\n                    <th>{ship.crew}</th>\n                    <th>{ship.hyperdriveRating}</th>\n                    <th>{ship.manufacturer}</th>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n            <Paginator\n             current={parseInt(page)} \n             path={\"/starships/\"}\n             isAbleToNext={true}\n             isAbleToPrevious={true}\n             />\n            <Feeder data={data.allStarships} />\n          </Container>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default Starships;\n","import React from 'react';\n\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button } from 'react-bulma-components';\nimport { matchPath } from 'react-router';\n\nimport './EntityNavigation.css'\n\nconst EntityNavigation = () =>{\n    return(\n        <div>\n            <NavLink to=\"/starships\" activeClassName=\"bt-active\"><Button color=\"black\">Starships</Button></NavLink>\n            <NavLink to=\"/persons\" activeClassName=\"bt-active\"><Button color=\"black\">People</Button></NavLink>\n            <NavLink to=\"/vehicles\" activeClassName=\"bt-active\"><Button color=\"black\">Vehicles</Button></NavLink>\n            <NavLink to=\"/planets\" activeClassName=\"bt-active\"><Button color=\"black\">Planets</Button></NavLink>\n            <NavLink to=\"/species\" activeClassName=\"bt-active\"><Button color=\"black\">Species</Button></NavLink>            \n        </div>\n    )\n}\n\nexport default EntityNavigation","import React from 'react';\nimport './App.css';\n\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport Starships from './entities/Starships'\n\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\n\nimport { Heading } from 'react-bulma-components';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport EntityNavigation from './EntityNavigation';\n\nconst client = new ApolloClient({\n  uri: 'https://swapi.graph.cool/'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router className=\"App\">\n        <header className=\"App-header stars\">\n          <Heading size={2} className=\"Title\">SW-API<br/>WARS</Heading>\n          <a href=\"https://github.com/reaganiwadha/gci-starwars-dashboard\" className=\"Credit\">By Regan Iwadha/melunian</a>\n          <EntityNavigation/>\n          <Switch>\n            <Route path=\"/starships/:page\">\n              <Starships />\n            </Route>\n            <Route path=\"/starships\">            \n              <Redirect to=\"/starships/1\" />\n            </Route>\n          </Switch>\n        </header>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}